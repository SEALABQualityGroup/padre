wizard PaF{
	guard :
		self.isTypeOf(Operation) and (self.F_probExec() and self.F_resDemand(_th_maxResDemand()) and (not self.F_T(_th_SthReq()) or not self.F_maxHwUtil(_th_maxHwUtil())))
	title : "Move it to a new Component deployed to a new Node"
	do{
		self.moveToNewOwnerDeployedOnNewNode();
	}
}
wizard PaF{
	guard :
		self.isTypeOf(Operation) and (self.F_probExec() and self.F_resDemand(_th_maxResDemand()) and (not self.F_T(_th_SthReq()) or not self.F_maxHwUtil(_th_maxHwUtil())))
	title : "Move it to a new Component deployed to the less used neighbour Node"
	do{
		self.moveToNewOwnerDeployedOnNearLessUsedNode();
	}
}
wizard PaF{
	guard :
		self.isTypeOf(Operation) and (self.F_probExec() and self.F_resDemand(_th_maxResDemand()) and (not self.F_T(_th_SthReq()) or not self.F_maxHwUtil(_th_maxHwUtil())))
	title : "Redeploy its owning Component "+self.class.name+" to the less used neighbour Node"
	do{
		self.redeployOnNearLessUsedNode();
	}
}
wizard PaF{
	guard :
		self.isTypeOf(Operation) and (self.F_probExec() and self.F_resDemand(_th_maxResDemand()) and (not self.F_T(_th_SthReq()) or not self.F_maxHwUtil(_th_maxHwUtil())))
	title : "Change its owning Component from "+self.class.name+" to the one with the lowest demand"
	do{
		self.moveToLessCriticalOwner();
	}
}
wizard PaF{
	guard :
		self.isTypeOf(Operation) and (self.F_probExec() and self.F_resDemand(_th_maxResDemand()) and (not self.F_T(_th_SthReq()) or not self.F_maxHwUtil(_th_maxHwUtil())))
	title : "Decomposition"
	do{
		self.decomposition();
	}
}
wizard CPS{
	guard :
		self.isTypeOf(Node) and (self.F_maxQL(th_maxQL) and self.F_maxHwUtil(_th_maxHwUtil()))
	title : "Move it to a new Component deployed to a new Node"
	do{
		self.moveToNewComponentDeployedOnNewNode();
	}
}
wizard CPS{
	guard :
		self.isTypeOf(Node) and (self.F_maxQL(th_maxQL) and self.F_maxHwUtil(_th_maxHwUtil()))
	title : "Move it to a new Component deployed to the less used neighbour Node"
	do{
		self.moveToNewComponentDeployedOnNearLessUsedNode();
	}
}
wizard CPS{
	guard :
		self.isTypeOf(Node) and (self.F_maxQL(th_maxQL) and self.F_maxHwUtil(_th_maxHwUtil()))
	title : "Redeploy its owning Component "+self.name+" to the less used neighbour Node"
	do{
		self.redeployOnNearLessUsedNode();
	}
}
wizard CPS{
	guard :
		self.isTypeOf(Node) and (self.F_maxQL(th_maxQL) and self.F_maxHwUtil(_th_maxHwUtil()))
	title : "Change its owning Component from "+self.name+" to the one with the lowest demand"
	do{
		self.moveToLessCriticalComponent();
	}
}
wizard ExtensiveProcessingAP{
	guard :
		self.isTypeOf(Component) and (self.F_resDemand(_th_maxResDemand(), _th_minResDemand()) and self.F_probExec() and (self.F_maxHwUtil(_th_maxHwUtil())) or self.F_RT(_th_SrtReq()))
	title : "Move it to a new Component deployed to a new Node"
	do{
		self.moveToNewComponentDeployedOnNewNode();
	}
}
wizard ExtensiveProcessingAP{
	guard :
		self.isTypeOf(Component) and (self.F_resDemand(_th_maxResDemand(), _th_minResDemand()) and self.F_probExec() and (self.F_maxHwUtil(_th_maxHwUtil())) or self.F_RT(_th_SrtReq()))
	title : "Move it to a new Component deployed to the less used neighbour Node"
	do{
		self.moveToNewComponentDeployedOnNearLessUsedNode();
	}
}
wizard ExtensiveProcessingAP{
	guard :
		self.isTypeOf(Component) and (self.F_resDemand(_th_maxResDemand(), _th_minResDemand()) and self.F_probExec() and (self.F_maxHwUtil(_th_maxHwUtil())) or self.F_RT(_th_SrtReq()))
	title : "Redeploy its owning Component "+self.name+" to the less used neighbour Node"
	do{
		self.redeployOnNearLessUsedNode();
	}
}
wizard ExtensiveProcessingAP{
	guard :
		self.isTypeOf(Component) and (self.F_resDemand(_th_maxResDemand(), _th_minResDemand()) and self.F_probExec() and (self.F_maxHwUtil(_th_maxHwUtil())) or self.F_RT(_th_SrtReq()))
	title : "Change its owning Component from "+self.name+" to the one with the lowest demand"
	do{
		self.moveToLessCriticalComponent();
	}
}
wizard Blob_Controller{
	guard :
		self.isTypeOf(Component) and self.F_numClientConnects(_th_maxConnects()) and self.F_numMsgsIn(_th_maxMsgs()) and (self.F_maxHwUtil(_th_maxHwUtil()) or self.F_maxNetUtil(_th_maxNetUtil()))
	title : "Reduce Client Connects <"+self.name+">"
	do{
		self.reduceNumberOfClientConnects(_th_maxConnects());
	}
}
wizard Blob_dataContainer{
	guard :
		self.isTypeOf(Component) and self.F_numSupplierConnects(_th_maxConnects()) and self.F_numMsgsOut(_th_maxMsgs()) and (self.F_maxHwUtil(_th_maxHwUtil()) or self.F_maxNetUtil(_th_maxNetUtil()))
	title : "Reduce Supplier Connects of <"+self.name+">"
	do{
		self.reduceNumberOfSupplierConnects();
	}
}
wizard EmptySemiTruck{
	guard :
		self.isTypeOf(Component) and self.F_numRemMsgs(_th_maxRemMsgs()) and (self.F_maxNetUtil(_th_minNetUtil()) or self.F_numRemInst(_th_maxRemInst()))
	title : "Apply Session Facade Pattern"
	do{
		self.applySessionFacade();
	}
}
wizard EmptySemiTruck{
	guard :
		self.isTypeOf(Class) and self.F_numRemMsgs(_th_maxRemMsgs()) and (not self.F_maxNetUtil(_th_minNetUtil()) or self.F_numRemInst(_th_maxRemInst()))
	title : "Apply Session Facade Pattern"
	do{
		self.applySessionFacade();
	}
}
wizard TowerOfBabel{
	guard :
		self.isTypeOf(Component) and self.F_numExF(_th_maxExF()) and self.F_maxHwUtil(_th_maxHwUtil())
	title : "Apply the most used format"
	do{
		self.applyStandardFormat();
	}
}
