pre {
	"Transforming UML-MARTE model TO JMVA model ".println();
	//var profiler : new Native('org.eclipse.epsilon.eol.tools.ProfilerTool');
	//profiler.start('BatchProgram');
	   
}

post {
    //profiler.stop();
	// Store traceability links in custom model
	var trace : new Trace!Trace;
	for (t in transTrace.transformations) { 
	
		if(t.getSource().type.name == "Model" and not t.getSource().getAppliedStereotypes().isEmpty()) {
			
		} else {
			var link : new Trace!TraceLink;
			link.description = "Transformed by " + t.getRule().name;
			link.sourceType= ""+t.getSource().type.name;---to get source type
			link.targetType = ""+t.getTargets().first().type.name;---to get the Target type
			if(t.getSource().type.name == "Model")
				link.sourceName= "UML-MARTE model";
			else
				link.sourceName= ""+t.getSource().name;
			if(t.getTargets().first().type.name == "ModelType")
				link.targetName = "JMT model";
			else
				link.targetName = ""+t.getTargets().first().name;
	        trace.links.add(link); 
	    }
    }
    
    "end".println();
    
    //var jmvaGen : new Native("model.util.JmvaModelGeneratorForward");
    
}

    
rule Model2Model
	transform m : UML!Model
	to jmva : jmtmodel!ModelType{
	guard : m.getAppliedStereotypes().isEmpty()
	"(Source UML-MARTE Model: ".print() + m.name.print() + ")".println();
	"\tGenerating JMVA model.".println();
	
	jmva.parameters = new jmtmodel!`ParametersType`;
	
	var usecases : Collection = m.getUseCases();
	if(usecases.size() > 0) {
		jmva.parameters.classes = new jmtmodel!`ClassesType`;
		jmva.parameters.classes.number = new Native("java.math.BigInteger")(usecases.size().toString());
		for(uc:UseCase in usecases){
			if(isOpenclass(uc))
				jmva.parameters.classes.openclass.add(uc.equivalent());
			else if(isClosedclass(uc))
				jmva.parameters.classes.closedclass.add(uc.equivalent());
		}
	}
	
	var devices : Collection = m.getDevices();
	if(devices.size() > 0) {
		jmva.parameters.stations = new jmtmodel!`StationsType`;
		jmva.parameters.stations.number = new Native("java.math.BigInteger")(devices.size().toString());
		for(d:Device in devices){
			if(isLoadDependent(d)) {
				//jmva.parameters.stations.ldstation = new jmtmodel!`LdstationType`;
				jmva.parameters.stations.ldstation.add(d.equivalent());
			} else if(isDelay(d)) {
				//jmva.parameters.stations.delaystation = new jmtmodel!`DelaystationType`;
				jmva.parameters.stations.delaystation.add(d.equivalent());
			} else {
				//jmva.parameters.stations.listation = new jmtmodel!`ListationType`;
				jmva.parameters.stations.listation.add(d.equivalent());
			}
		}
	}
	
	if(usecases.size() > 0) {
		jmva.parameters.referenceStation = new jmtmodel!`ReferenceStationType`;
		jmva.parameters.referenceStation.number = new Native("java.math.BigInteger")(usecases.size().toString());
		for(uc:UseCase in usecases){
			var cl = new jmtmodel!`ClassType`;
			cl.name = uc.name;
			if(isClosedclass(uc))
				cl.refStation = getRefStation(uc);
			else if(isOpenclass(uc))
				cl.refStation = "Arrival Process";
			jmva.parameters.referenceStation.class.add(cl);
			//cl.refStation.toString().println();
		}
		//jmva.parameters.referenceStation.class.collect(c | c.refStation).println();
	}
	"\tJMVA model generated.".println();
}
	
rule UseCase2OpenClass
	transform uc : UML!UseCase
	to oc : jmtmodel!OpenclassType{
	
	guard: isOpenclass(uc)
	
	//"Beginning of UseCase2OpenClass rule".println();
	//"Created jmtmodel!OpenclassType From UML!UseCase : ".println();
	
	oc.name=uc.name;
	
	var s : UML!Stereotype = getAppliedStereotype(uc, "GaWorkloadEvent");
	var p : String = uc.getValue(s,"pattern");
	//if(extractNumericString(p).substring(extractNumericString(p).indexOf(".")).length() > 5)
	//	oc.rate = extractNumericString(p).substring(0, extractNumericString(p).indexOf(".") + 5).println().asReal(); 
	//else
		oc.rate = extractNumericString(p).asReal();                                                                                                                                        	
}

rule UseCase2ClosedClass
	transform uc : UML!UseCase
	to oc : jmtmodel!ClosedclassType{
	
	guard: isClosedclass(uc)
	
	//"Beginning of UseCase2ClosedClass rule".println();
	//"Created jmtmodel!ClosedclassType From UML!UseCase : ".println();
	
	oc.name=uc.name;
	
	var s : UML!Stereotype = getAppliedStereotype(uc, "GaWorkloadEvent");
	var p : String = uc.getValue(s,"pattern");
	//if(extractNumericString(p).substring(extractNumericString(p).indexOf(".")).length() > 5)
	//	oc.population = extractNumericString(p).substring(0, extractNumericString(p).indexOf(".") + 5).asReal(); 
	//else
		oc.population = extractNumericString(p).asReal().ceiling().asReal();                                                                                                                             	
}

rule Device2Ldstation
	transform d : UML!Device
	to station : jmtmodel!LdstationType{
	
	guard: isLoadDependent(d)
	
	//"Beginning of Device2Ldstation rule".println();
	//"Created jmtmodel!LdstationType From UML!Device : ".println();
	
	station.name=d.name;
	
	var s : UML!Stereotype = getAppliedStereotype(d, "GaExecHost");
	var mult : String = d.getValue(s,"resMult");
	if(mult.isDefined()) {
		station.servers = new Native("java.math.BigInteger")(mult);
	}
	
	var usecases : Collection = m.getUseCases();
	if(usecases.size() > 0) {
		station.servicetimes = new jmtmodel!`ServicetimesType2`;
		station.visits = new jmtmodel!`VisitsType1`;
		for(uc:UseCase in usecases){
			var v : jmtmodel!`VisitType` = new jmtmodel!`VisitType`;
			v.customerclass = uc.name;
			v.value = new Native("java.lang.Double")("1.0");
			station.visits.visit.add(v);/*
			v.value = countMsgsOnDevice(uc, d).asReal();
			//("Msgs on Device " + d.name + " = " + v.value).println();
			station.visits.visit.add(v);
			var st : jmtmodel!`ServicetimesType` = new jmtmodel!`ServicetimesType`;
			st.customerclass = uc.name;
			if(v.value = 0)
				st.value = "0.0";
			else
				st.value = (getDemandOnDevice(uc, d) / v.value).toString();*/
			var st : jmtmodel!`ServicetimesType` = new jmtmodel!`ServicetimesType`;
			st.customerclass = uc.name;
			st.value = getDemandOnDevice(uc, d).asString();
			//("Service time on Device " + d.name + " = " + st.value).println();
			station.servicetimes.servicetimes.add(st);
		}
	}
	/*
	station.servicetimes = new jmtmodel!`ServicetimesType2`;
	var st : jmtmodel!`ServicetimesType` = new jmtmodel!`ServicetimesType`;
	st.customerclass = "Prova";
	st.value = extractNumericString(p).toString();
	station.servicetimes.servicetimes.add(st);*/
	/*
	station.visits = new jmtmodel!`VisitsType1`;
	var v : jmtmodel!`VisitType` = new jmtmodel!`VisitType`;
	v.customerclass = "Prova";
	v.value = extractNumericString("1.0").asReal();
	station.visits.visit.add(v);    */                                                                                                                                    	
}

rule Device2Delaystation
	transform d : UML!Device
	to station : jmtmodel!DelaystationType{
	
	guard: isDelay(d)
	
	//"Beginning of Device2Delaystation rule".println();
	//"Created jmtmodel!DelaystationType From UML!Device : ".println();
	
	station.name=d.name;
	
	var usecases : Collection = m.getUseCases();
	if(usecases.size() > 0) {
		station.servicetimes = new jmtmodel!`ServicetimesType3`;
		station.visits = new jmtmodel!`VisitsType2`;
		for(uc:UseCase in usecases){
			var v : jmtmodel!`VisitType2` = new jmtmodel!`VisitType2`;
			v.customerclass = uc.name;
			v.value = new Native("java.lang.Double")("1.0");
			station.visits.visit.add(v);/*
			v.value = countMsgsOnDevice(uc, d).asReal();
			//("Msgs on Device " + d.name + " = " + v.value).println();
			station.visits.visit.add(v);
			var st : jmtmodel!`ServicetimeType1` = new jmtmodel!`ServicetimeType1`;
			st.customerclass = uc.name;/*
			if(v.value = 0)
				st.value = new Native("java.lang.Double")("0.0");
			else
				st.value = (getDemandOnDevice(uc, d) / v.value);*/
			var st : jmtmodel!`ServicetimeType1` = new jmtmodel!`ServicetimeType1`;
			st.customerclass = uc.name;
			st.value = new Native("java.lang.Double")(getDemandOnDevice(uc, d).asString());
			//("Service time on Device " + d.name + " = " + st.value).println();
			station.servicetimes.servicetime.add(st);
		}
	}
	/*
	
	station.servicetimes = new jmtmodel!`ServicetimesType3`;
	var st : jmtmodel!`ServicetimeType1` = new jmtmodel!`ServicetimeType1`;
	st.customerclass = "Prova";
	st.value = extractNumericString(p).asReal();
	station.servicetimes.servicetime.add(st);*/
	/*
	station.visits = new jmtmodel!`VisitsType2`;
	var v : jmtmodel!`VisitType` = new jmtmodel!`VisitType`;
	v.customerclass = "Prova";
	v.value = extractNumericString("1.0").asReal();
	station.visits.visit.add(v); */                                                                                                                                      	
}

rule Device2Listation
	transform d : UML!Device
	to station : jmtmodel!ListationType{
	
	guard: d.hasStereotype1("GaExecHost") and not isLoadDependent(d) and not isDelay(d)
	
	//"Beginning of Device2ListationType rule".println();
	//"Created jmtmodel!ListationType From UML!Device : ".println();
	
	station.name=d.name;
	
	var s : UML!Stereotype = getAppliedStereotype(d, "GaExecHost");
	var mult : String = d.getValue(s,"resMult");
	if(mult.isDefined()) {
		station.servers = new Native("java.math.BigInteger")(mult);
	}
	
	var usecases : Collection = m.getUseCases();
	if(usecases.size() > 0) {
		station.servicetimes = new jmtmodel!`ServicetimesType1`;
		station.visits = new jmtmodel!`VisitsType`;
		for(uc:UseCase in usecases){
			var v : jmtmodel!`VisitType1` = new jmtmodel!`VisitType1`;
			v.customerclass = uc.name;
			v.value = new Native("java.lang.Double")("1.0");
			station.visits.visit.add(v);/*
			v.value = countMsgsOnDevice(uc, d).asReal();
			//("Msgs on Device " + d.name + " = " + v.value).println();
			station.visits.visit.add(v);
			var st : jmtmodel!`ServicetimeType` = new jmtmodel!`ServicetimeType`;
			st.customerclass = uc.name;
			//st.value = getDemandOnDevice(uc, d).toString();
			if(v.value = 0)
				st.value = new Native("java.lang.Double")("0.0");
			else
				st.value = (getDemandOnDevice(uc, d) / v.value);*/
			var st : jmtmodel!`ServicetimeType` = new jmtmodel!`ServicetimeType`;
			st.customerclass = uc.name;
			st.value = new Native("java.lang.Double")(getDemandOnDevice(uc, d).asString());
			//("Service time on Device " + d.name + " = " + v.value).println();
			station.servicetimes.servicetime.add(st);
		}
	}
	/*
	var s : UML!Stereotype = getAppliedStereotype(d, "GaExecHost");
	var p : String = d.getValue(s,"speedFactor").println();
	station.servicetimes = new jmtmodel!`ServicetimesType1`;
	var st : jmtmodel!`ServicetimeType` = new jmtmodel!`ServicetimeType`;
	st.customerclass = "Prova";
	st.value = extractNumericString(p).asReal();
	station.servicetimes.servicetime.add(st);*/
	/*
	station.visits = new jmtmodel!`VisitsType`;
	var v : jmtmodel!`VisitType1` = new jmtmodel!`VisitType1`;
	v.customerclass = "Prova";
	v.value = extractNumericString("1.0").asReal();
	station.visits.visit.add(v); */                                                                                                                                                   	
}


//------------------------------------------------------------------------------------------------------------------//

operation extractNumericString(s : String) : Real {
	var resString : String = "";
	
	var i : Integer = 0;
	for(c in s.toCharSequence()) {
		if(c.toString().isReal() or c.toString() = ".")
			resString = resString.concat(c.toString());
	}
	var res : Real = resString.asReal();
	return res;
}


operation getAppliedStereotype(el : UML!Element, sName : String) : UML!Stereotype {
	var sList : Sequence(UML!Stereotype) = el.getAppliedStereotypes();
	for(s in sList){
	    if(s.name=sName)
	    	return s;
	}
	return null;
}

operation isOpenclass(uc : UML!UseCase) : Boolean {
	if(uc.hasStereotype1("GaWorkloadEvent")) {
		var s : UML!Stereotype = getAppliedStereotype(uc, "GaWorkloadEvent");
		var p : String = uc.getValue(s,"pattern");
		if(p.startsWith("open"))
			return true;
	}
	return false;
}

operation isLoadDependent(d : UML!Device) : Boolean {
	if(d.hasStereotype1("GaExecHost")) {
		var s : UML!Stereotype = getAppliedStereotype(d, "GaExecHost");
		var p : String = d.getValue(s,"schedPolicy").toString();
		if(p.startsWith("Other"))
			return true;
	}
	return false;
}

operation isDelay(d : UML!Device) : Boolean {
	if(d.hasStereotype1("GaExecHost")) {
		var s : UML!Stereotype = getAppliedStereotype(d, "GaExecHost");
		var p : String = d.getValue(s,"schedPolicy").toString();
		if(p.startsWith("Undef"))
			return true;
	}
	return false;
}



operation isClosedclass(uc : UML!UseCase) : Boolean {
	if(uc.hasStereotype1("GaWorkloadEvent")) {
		var s : UML!Stereotype = getAppliedStereotype(uc, "GaWorkloadEvent");
		var p : String = uc.getValue(s,"pattern");
		if(p.startsWith("closed"))
			return true;
	}
	return false;
}


operation getRefStation(uc : UML!UseCase) : String {
	var interaction = uc.classifierBehavior;
	if(interaction.isDefined()) {
		var firstMsg = interaction.message.first();
		var lifeline = getLifeline(interaction, firstMsg.receiveEvent);
		var artifact = getArtifactFromProperty(lifeline.represents);
		var deplNode = getNodes(artifact).first();
		return deplNode.name;
	}
}

operation getLifeline(int : Interaction, mos : MessageOccurrenceSpecification) : Lifeline{
	return Lifeline.allInstances->selectOne(lf | lf.namespace == int and 
			lf.getCoveredBys()->exists(iterator | iterator == mos));
}

operation getArtifactFromProperty(prop : Property) : Artifact {
	return Artifact.all.select(a|a.name=prop.type.name).first();
}

operation getNodes(c : Component) : List(Node){
	var returnValue : List(Node) = new List(Node);
	for (artifact in getAllArtifacts(c)){
		for(node in Node.allInstances){
			if( hasDeployment(node, artifact) and not isLegacy(node)){
				returnValue.add(node);
			}
		}
	}
	return returnValue;
}

operation getNodes(a : Artifact) : List(Node){
	var returnValue : List(Node) = new List(Node);
	for(node in Node.allInstances){
		if( hasDeployment(node, a) and not isLegacy(node)){
			returnValue.add(node);
		}
	}
	return returnValue;
}

operation getAllArtifacts(c : Component) : Sequence(Artifact){
	var returnValue : Sequence(Artifact) = new Sequence(Artifact);
	for(manifestation in Manifestation.allInstances){
		if(hasUtilizedElement(manifestation, c)){
			returnValue.addAll(manifestation.client);
		}
	}
	return returnValue;
}

operation hasUtilizedElement(man : Manifestation, component : Component) : Boolean{
	if(man.utilizedElement == component){
		return true;
	}
	return false;
}

operation hasDeployment(node : Node, artifact : Artifact) : Boolean{
	for(deployment in node.deployment){
		for(art in deployment.getDeployedArtifacts()){
			if(art == artifact){
				return true;
			}		
		}
	}
	return false;
}

operation isLegacy(el : Element) : Boolean {
	if(el.hasStereotype1("Allocated")){
		return true;
	}
	return false;
}

// TO TEST
operation getDemandOnDevice(uc : UseCase, d : Device) : Real {
	//ASSUMPTION: Demand di uno UseCase = Demand della sua main Interaction * uc probability (optional, 1.0 is default) * uc repetitions (optional, 1.0 is default)
	var i : Interaction = getMainInteraction(uc); //ASSUMPTION: it is specified through uc.classifierBehavior
	var s : UML!Stereotype = getAppliedStereotype(uc, "GaStep");
	var prob : Real = 1.0;
	var rep : Real = 1.0;
	if(s.isDefined()) {
		var p : String = uc.getValue(s,"prob");
		if(p.isDefined()) {
			prob = p.asReal();
		}
		var r : String = uc.getValue(s,"rep");
		if(r.isDefined()) {
			rep = r.asReal();
		}
	}
	var ucDemand : Real = getDemandOnDevice(i, d); //Getting the demand of the main Interaction
	return ucDemand * prob * rep; //Calculating uc demand
}

// TO TEST
operation getDemandOnDevice(i : Interaction, d : Device) : Real {
	//ASSUMPTION: Demand di una Interaction = SUM(Demand di ogni Message, Demand di ogni referred Interaction)
	var totDemand : Real = 0.0;
	var devMsgs : Sequence(Message) = getMsgsOnDevice(i, d);
	if(devMsgs.size() > 0) {
		for(m in devMsgs) {
			var mDemand : Real = 1.0;
			var servCount : Real = 1.0;
			var prob : Real = 1.0;
			var rep : Real = 1.0;
			if(m.hasStereotype1("GaAcqStep")) {
				var s : UML!Stereotype = getAppliedStereotype(m, "GaAcqStep");
				if(s.isDefined()) {
					var sc : String = m.getValue(s,"servCount").first();
					if(sc.isDefined()) {
						servCount = servCount.asReal();
					}
					var p : String = m.getValue(s,"prob");
					if(p.isDefined()) {
						prob = p.asReal();
					}
					var r : String = m.getValue(s,"rep");
					if(r.isDefined()) {
						rep = r.asReal();
					}
				}
			}
			var speedFactor : Real = 1.0;
			if(d.hasStereotype1("GaExecHost")) {
				var s : UML!Stereotype = getAppliedStereotype(m, "GaExecHost");
				if(s.isDefined()) {
					var sf : String = m.getValue(s,"speedFactor");
					if(sf.isDefined()) {
						speedFactor = speedFactor.asReal();
					}
				}
			}
			mDemand = servCount * prob * rep;	//ASSUMPTION: Demand di un messaggio = servCount * probability (optional, 1.0 is default) * repetitions (optional, 1.0 is default) * speedFactor (optional, 1.0 is default))
			totDemand = totDemand + mDemand;		//ASSUMPTION: Summing Messages demand
		}
	}
	var refs : Sequence(InteractionUse) = InteractionUse.all.select(u | u.namespace = i.qualifiedName);
	if(refs.size() > 0) {
		for(iu in refs) { //getting the total demand of referred Interactions
			var iuDemand : Real = 0.0;
			if(iu.refersTo.isDefined()) {
				iuDemand = getDemandOnDevice(iu.refersTo, d);
				totDemand = totDemand + iuDemand;
			}
		}
	}
	return totDemand;
}

// TO TEST
operation countMsgsOnDevice(uc : UseCase, d : Device) : Real {
	var i : Interaction = getMainInteraction(uc); //ASSUMPTION: it is specified through uc.classifierBehavior
	var ucMsgs : Real = countMsgsOnDevice(i, d); //Counting the Messages of the main Interaction
	return ucMsgs;
}

// TO TEST
operation countMsgsOnDevice(i : Interaction, d : Device) : Real {
	var totMsgs : Real = 0.0;
	var devMsgs : Sequence(Message) = getMsgsOnDevice(i, d);
	if(devMsgs.size() > 0) {
		for(m in devMsgs) {
			var servCount : Real = 1.0;
			if(m.hasStereotype1("GaAcqStep")) {
				var s : UML!Stereotype = getAppliedStereotype(m, "GaAcqStep");
				if(s.isDefined()) {
					var sc : String = m.getValue(s,"servCount").first();
					if(sc.isDefined()) {
						totMsgs = totMsgs + 1;
					}
				}
			}
		}
	}
	var refs : Sequence(InteractionUse) = InteractionUse.all.select(u | u.namespace = i.qualifiedName);
	if(refs.size() > 0) {
		for(iu in refs) { //getting the total demand of referred Interactions
			if(iu.refersTo.isDefined()) {
				totMsgs = totMsgs + 1;
			}
		}
	}
	return totMsgs;
}

// TO TEST
operation getMainInteraction(uc : UseCase) : Interaction {
	return uc.classifierBehavior;
}

// TO TEST
operation getMsgsOnDevice(i : Interaction, d : Device) : Sequence(Message) {
	var msgs : Sequence(Message) = getMsgsWithDemand(i);
	var devMsgs : Sequence(Message) = new Sequence();
	devMsgs = msgs.select(m | resolveDevice(m) = d);
	return devMsgs;
}

// TO TEST
operation getMsgsWithDemand(i : Interaction) : Sequence(Message) {
	var demMsgs : Sequence(Message) = new Sequence();
	var msgs : Sequence(Message) = i.message.asSequence();
	for(m in msgs) {
		if(m.hasStereotype1("GaAcqStep")) {
			var s : UML!Stereotype = getAppliedStereotype(m, "GaAcqStep");
			if(m.getValue(s,"prob").isDefined()) {
				demMsgs.add(m);
			}
		}
	}
	return demMsgs;
}

// TO TEST
operation resolveDevice(msg : Message) : Device {
	//msg.receiveEvent.covered.represents.first().type; // This is the artifact on the lifeline
	if(msg.receiveEvent.covered.isDefined() and msg.receiveEvent.covered.represents.isDefined() and msg.receiveEvent.covered.represents.first().type.isDefined() and 
	   (msg.receiveEvent.covered.represents.first().type.isTypeOf(Artifact) or msg.receiveEvent.covered.represents.first().type.isTypeOf(Component)))
		return getDeploymentDevice(msg.receiveEvent.covered.represents.first().type);
	return null;
}

//TO TEST
operation getDeploymentDevice(el : Element) : Device {
	if(el.isTypeOf(Artifact)) {
		return Device.allInstances->selectOne(dev : Device | 
			dev.getDeployments()->exists(deploy : Deployment | 
				deploy.getDeployedArtifacts()->contains(a)
			)
		);
	}
	if(el.isTypeOf(Component)) {
		return Device.allInstances->selectOne(dev : Device | 
			dev.getDeployments()->exists(deploy : Deployment | 
				deploy.getDeployedArtifacts()->collect(a|a.manifestation)->flatten()->select(m|m.utilizedElement.isDefined())->
				collect(m|m.utilizedElement)->flatten()->contains(el)
			)
		);
	}

	
}

//TO TEST
operation getDeployedArtifacts(d : Device) : Sequence (Artifact){
	var returnValue : Sequence(Artifact) = new Sequence(Artifact);
	for (dep in d.getDeployments()){
		for(sup in dep.supplier){
			if(sup.isTypeOf(Artifact)){
				returnValue.add(sup);
			}
		}
	}
	return returnValue;
}


//------------------------------------------------------------------------------------------------------------------//

operation getMultiplicityOfDevice(a:UML!Device):Integer{
	" operation getMultiplicityOfDevice(a:UML!Device)  is running now ".println();
	var stereotype:Any=a.getAppliedStereotypes();
	"stereotypes are : ".print()+stereotype.println();
	if(stereotype.isDefined()){   
		for(s in stereotype){
			if(s.name="GaExecHost"){
				"GaExecHost isfound".println();
				"stereotypes is : ".print()+s.println();
				"Selected Attributes are :".print()+s.getAllAttributes().name.println();
				if(s.getAllAttributes().selectOne(a|a.name="resMult").isDefined() ){
					"value of reMult  is : ".print()+a.getValue(s,"resMult").asInteger().println();
					"Type of the value of resMult  is : ".print()+a.getValue(s,"resMult").asInteger().type().println();
					return a.getValue(s,"resMult").asInteger();
				}
			}
		}
	}
}
//------------------------------------------------------------------------------------------------------------------//
operation getStereotypeOfDevice(a:UML!Device):String{
	" operation getStereotypeOfDevice(a:UML!Device) is running now ".println();
	var stereotype:Any=a.getAppliedStereotypes();
	"stereotypes are : ".print()+stereotype.println(); 
     if(stereotype.isDefined()){   
    	 for(s in stereotype){           
    		 if(s.name="GaExecHost"){
	              "GaExecHost isfound".println();
	    	      "stereotypes is : ".print()+s.println();
	    	      "Selected Attributes are :".print()+s.getAllAttributes().name.println();
	              if(s.getAllAttributes().selectOne(a|a.name="otherSchedPolicy").isDefined() ){
	                   "value of other Sched Policy  is : ".print()+a.getValue(s,"otherSchedPolicy").asString().println();
	                   "Type of the value of other Sched Policy  is : ".print()+a.getValue(s,"otherSchedPolicy").asString().type().println();          
	                    return a.getValue(s,"otherSchedPolicy").asString(); 
                   }
    		 }
    	 }
     }
}
//------------------------------------------------------------------------------------------------------------------//

operation getMultiplicityOfArtifact(a:UML!Artifact):Integer{
	"operation getMultiplicityOfDevice(a:UML!Device) is running now ".println();
	var stereotype:Any=a.getAppliedStereotypes();
	"stereotypes are : ".print()+stereotype.println();
	if(stereotype.isDefined()){   
		for(s in stereotype){              
			if(s.name="GaExecHost"){
				"GaExecHost isfound".println();
	    	    "stereotypes is : ".print()+s.println();
	    	    "Selected Attributes are :".print()+s.getAllAttributes().name.println();
	            if(s.getAllAttributes().selectOne(a|a.name="resMult").isDefined() ){
	            	"value of reMult  is : ".print()+a.getValue(s,"resMult").asInteger().println();
	                "Type of the value of resMult  is : ".print()+a.getValue(s,"resMult").asInteger().type().println();
	                return a.getValue(s,"resMult").asInteger();  
	            }
			}
		}
	} 
}


//------------------------------------------------------------------------------------------------------------------//

operation getStereotypeOfArtifact(a:UML!Artifact):String{
	" operation getStereotypeOfArtifact(a:UML!Artifact)  is running now ".println();
	var stereotype:Any=a.getAppliedStereotypes();
	"stereotypes are : ".print()+stereotype.println(); 
     if(stereotype.isDefined()){   
    	 for(s in stereotype){              
    		 if(s.name="Scheduler"){
    			 "Scheduler isfound".println();
    			 "stereotypes is : ".print()+s.println();
	    	     "Selected Attributes are :".print()+s.getAllAttributes().name.println();
	    	     if(s.getAllAttributes().selectOne(a|a.name="otherSchedPolicy").isDefined() ){
	    	    	 "value of other Sched Policy  is : ".print()+a.getValue(s,"otherSchedPolicy").asString().println();
	                 "Type of the value of other Sched Policy  is : ".print()+a.getValue(s,"otherSchedPolicy").asString().type().println();
	                 return a.getValue(s,"otherSchedPolicy").asString(); 
	    	     }
    		 }
    	 }
     }
}

//------------------------------------------------------------------------------------------------------------------//
//--------------------------------------------------------------------------------------------------------------------------------------------------//
operation isSequential(edge:UML!ControlFlow):Boolean{
	
	"Operation isSequential is running ".println();
	" edge is : ".println()+edge.println();
	var cflowpartition:UML!ActivityPartition;
	
		if (not IsCrossPartition(edge)){
			cflowpartition=CFPartition(edge);
			
		}
	" cflowPartition is : ".println()+cflowpartition.println();
	 
	if(edge.target.isTypeOf(MergeNode) or edge.target.isTypeOf(JoinNode) or edge.target.isTypeOf(DecisionNode) or edge.target.isTypeOf(ForkNode) or edge.target.isTypeOf(ActivityFinalNode) ){
		return false;
	}else if(edge.source.isTypeOf(MergeNode) or edge.source.isTypeOf(JoinNode) or edge.source.isTypeOf(DecisionNode) or edge.source.isTypeOf(ForkNode) or edge.source.isTypeOf(InitialNode) or edge.source.isTypeOf(AcceptEventAction)){
		return false;
	}else{
		var col1:Sequence;
		var col2:Sequence;
		//get the outgoing which is in this partition
		var cflow1:Collection=edge.source.outgoing;
        for(i in cflow1){
        	if(cflowpartition.IsThisEdgeInThisPartition(i)){
        		//collect the edges which inPartition attribute is set 
        		col1.add(i);
        	}
   		     
        }
        "col1 contains ".print()+col1.println();
	            
        var cflow2:Collection=edge.target.incoming;
        for(a in cflow2){
        	if(cflowpartition.IsThisEdgeInThisPartition(a)){
        		//collect the edges which inPartition attribute is set 
        		col2.add(a);
        	}
   		     
        }
		        
	    "col2 contains ".print()+col2.println();
	     
	    if((col1.size()=1) and (col2.size()=1)){
	     	return true;
	    }else{
	      	return false;
	    }
	}	
}

//-----------------------------------------------------------------------------------------------------------------------------//

operation Model getDevices():Collection{
	return Device.all.select(d|d.hasStereotype1("GaExecHost"));	
}

operation Model getUseCases():Collection{
	return UseCase.all.select(d|d.hasStereotype1("GaScenario") and d.hasStereotype1("GaWorkloadEvent"));	
}

operation Device getArtifact():Collection  {
	return Artifact.all.select(a|a.namespace=self);
}



operation UML!Class hasStereotype(name:String):Boolean {
	    
	"hasStrereotype Method is running now".println();
	
	var c: Sequence;
	c=self.getAppliedStereotypes(); // Sequence of Stereotypes
	
	for(s:Stereotype in c){
	
		s.name.println();
		if(s.name=name){
			self.name.print()+" Found ".println();
			return true;
		
		}
		//self.name.print()+" not Found".println();
		//return false;
	}
	self.name.print()+" not Found".println();
	return false;
}


operation UML!Class hasStereotype1(name:String):Boolean {
	    
	var c: Sequence;
	c=self.getAppliedStereotypes(); // Sequence of Stereotypes
	for(s:Stereotype in c){
		//s.name.println();
		if(s.name=name){
			//self.name.print()+"Found".println();
			return true;
		}
		//self.name.print()+" not Found".println();
		//return false;
	}
	//self.name.print()+" not Found".println();
	return false;
}

operation UML!Element hasStereotype1(name:String):Boolean {
	    
	var c: Sequence;
	c=self.getAppliedStereotypes(); // Sequence of Stereotypes
	
	for(s:Stereotype in c){
		//s.name.println();
		if(s.name=name){
			//self.name.print()+"Found".println();
			return true;
		}
		//self.name.print()+" not Found".println();
		//return false;
	}
	//self.name.print()+" not Found".println();
	return false;
}